import React, { useEffect, useState } from 'react';
import Styled from 'styled-components';
import Icon from '@mdi/react';
import { mdiCardsHeart, mdiMessageReply, mdiAccountGroup } from '@mdi/js';
import Colors from '../../Colors';
import { useAppContext } from '../../../Context/AppContext';
// import { useVideoCallContext } from '../../../Context/VideoCallContext';
import { getCall, postCall } from '../../../APIs/requests';
import api from '../../../APIs/endpoints';
import cookie from 'js-cookie';

function EventOptions() {
  const { handleSprayState } = useAppContext();
  // const { handleTablesState, handleSideDrawerState } = useVideoCallContext();
  const [liked, setLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(0);
  const [attendee, setAttendees] = useState(0);
  const [showLikeBubbles, setShowLikeBubbles] = useState(false);

  useEffect(() => {
    getCall(api.getEventLikes(cookie.get('eid')), {})
      .then((response) => {
        setLikeCount(response.all_likes?.length);
      })
      .catch((error) => {
        console.log(error);
      });
  }, [liked]);

  useEffect(() => {
    setInterval(() => {
      getCall(api.getEventAttendee(cookie.get('eid')))
        .then((response) => {
          if (response.status === 200) {
            setAttendees(response.attendee.length);
          }
        })
        .catch((error) => {
          console.log(error);
        });
    }, 30000);
  }, []);

  // function showTablesHandler() {
  //   handleDrawerState();
  //   handleTablesState(true);
  //   handleSideDrawerState(false);
  // }

  function handleLikeEvent(e) {
    setLiked((prevState) => !prevState);
    setShowLikeBubbles(false);
    setShowLikeBubbles(true);
    let time = 4000;

    if (showLikeBubbles) {
      setTimeout(() => {
        setShowLikeBubbles(false);
      }, time);
    }

    clearTimeout(time);

    const target = e.target;

    target.classList.add('heartbeat');

    setTimeout(() => {
      target.classList.remove('heartbeat');
    }, 1000);

    postCall(api.postEventLike, {}, { event_id: cookie.get('eid') })
      .then((response) => {})
      .catch((error) => {
        console.log(error);
      });
  }

  return (
    <OptionsWrapper>
      <OptionItems>
        <SingleOption>
          <Icon path={mdiAccountGroup} size={1} color="#fff" />
          <span>{attendee}</span>
          <span>Attendees</span>
        </SingleOption>
        {/* <SingleOption>
          <Icon path={mdiRadioboxMarked} size={0.8} color="#fff" />
          <span>Record</span>
        </SingleOption> */}
        <SingleOption onClick={handleLikeEvent}>
          <Icon
            path={mdiCardsHeart}
            size={0.8}
            color={!showLikeBubbles ? '#fff' : '#dd0d0d'}
            style={{ rotate: 'y 180deg' }}
          />
          {showLikeBubbles ? (
            <img
              src="/assets/images/icons/heartbubble.gif"
              alt="Like"
              className="likebubble"
            />
          ) : null}
          <span>{likeCount}</span>
        </SingleOption>
        <SingleOption>
          <CommentNotification />
          <Icon
            path={mdiMessageReply}
            size={0.8}
            color="#fff"
            style={{ rotate: 'y 180deg' }}
          />
          <span>2.6k</span>
        </SingleOption>
        <SingleOption onClick={handleSprayState}>
          <img src="/assets/images/icons/cashspray.svg" alt="cash" />
          <span>Spray Cash</span>
        </SingleOption>
      </OptionItems>
    </OptionsWrapper>
  );
}

const OptionsWrapper = Styled.nav`
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 70px;
  z-index: 999999;
  overflow: hidden;
`;

const OptionItems = Styled.ul`
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  margin: 0;
  padding: 0;
`;

const SingleOption = Styled.li`
  display: flex;
  flex-direction: column;
  margin-top: 20px;
  position: relative;
  img, svg {
    align-self: center;
    margin-bottom: 7px;
    svg.flip {
      transform: rotateY(180deg);
    }
  }
  img.likebubble {
    width: 6rem;
    position: absolute;
    top: -97%;
  }
  span {
    font-size: 10px;
    color: #fff;
    font-weight: 800;
    text-align: center;
    width: 100%;
  }
  .heartbeat {
	  -webkit-animation: heartbeat 1.5s ease-in-out infinite both;
	  animation: heartbeat 1.5s ease-in-out infinite both;
  }
  /* ----------------------------------------------
  * Generated by Animista on 2020-10-6 0:39:48
  * Licensed under FreeBSD License.
  * See http://animista.net/license for more info. 
  * w: http://animista.net, t: @cssanimista
  * ---------------------------------------------- */

  /**
   * ----------------------------------------
   * animation heartbeat
   * ----------------------------------------
   */
  @-webkit-keyframes heartbeat {
    from {
      -webkit-transform: scale(1);
              transform: scale(1);
      -webkit-transform-origin: center center;
              transform-origin: center center;
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
    10% {
      -webkit-transform: scale(0.91);
              transform: scale(0.91);
      -webkit-animation-timing-function: ease-in;
              animation-timing-function: ease-in;
    }
    17% {
      -webkit-transform: scale(0.98);
              transform: scale(0.98);
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
    33% {
      -webkit-transform: scale(0.87);
              transform: scale(0.87);
      -webkit-animation-timing-function: ease-in;
              animation-timing-function: ease-in;
    }
    45% {
      -webkit-transform: scale(1);
              transform: scale(1);
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
  }
  @keyframes heartbeat {
    from {
      -webkit-transform: scale(1);
              transform: scale(1);
      -webkit-transform-origin: center center;
              transform-origin: center center;
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
    10% {
      -webkit-transform: scale(0.91);
              transform: scale(0.91);
      -webkit-animation-timing-function: ease-in;
              animation-timing-function: ease-in;
    }
    17% {
      -webkit-transform: scale(0.98);
              transform: scale(0.98);
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
    33% {
      -webkit-transform: scale(0.87);
              transform: scale(0.87);
      -webkit-animation-timing-function: ease-in;
              animation-timing-function: ease-in;
    }
    45% {
      -webkit-transform: scale(1);
              transform: scale(1);
      -webkit-animation-timing-function: ease-out;
              animation-timing-function: ease-out;
    }
  }
`;

const CommentNotification = Styled.div`
  width: 7px;
  height: 7px;
  background: ${Colors.defaultGreen};
  border-radius: 50%;
  position: absolute;
  right: 0;
  top: -3.5px;
`;

export default EventOptions;
